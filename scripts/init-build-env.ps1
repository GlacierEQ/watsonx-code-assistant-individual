# Initialize build environment for Ninja team on Windows

param (
    [string]$BuildDir = "build",
    [switch]$Clean,
    [switch]$UseCMake
)

# Output formatting
function WriteColor([string]$text, [string]$color = "White") {
    Write-Host $text -ForegroundColor $color
}

WriteColor "Initializing build environment for Ninja..." "Cyan"

# Clean if requested
if ($Clean) {
    if (Test-Path $BuildDir) {
        WriteColor "Cleaning build directory..." "Yellow"
        Remove-Item -Recurse -Force $BuildDir
    }
}

# Create build directory if it doesn't exist
if (-not (Test-Path $BuildDir)) {
    WriteColor "Creating build directory..." "Yellow"
    New-Item -Path $BuildDir -ItemType Directory -Force | Out-Null
}

# Check if CMake should be used
if ($UseCMake -and (Get-Command cmake -ErrorAction SilentlyContinue)) {
    WriteColor "Initializing build with CMake and Ninja..." "Yellow"
    
    # Create simple CMakeLists.txt if it doesn't exist
    if (-not (Test-Path "CMakeLists.txt")) {
        WriteColor "Creating basic CMakeLists.txt..." "Yellow"
        @"
cmake_minimum_required(VERSION 3.14)
project(WatsonxCodeAssistant VERSION 1.0.0 LANGUAGES CXX)

add_executable(placeholder placeholder.cpp)
"@ | Set-Content "CMakeLists.txt"
    }
    
    # Create placeholder source
    if (-not (Test-Path "placeholder.cpp")) {
        @"
// Placeholder source file for build system
#include <iostream>

int main() {
    std::cout << "Watsonx Code Assistant Ninja Build Team\n";
    return 0;
}
"@ | Set-Content "placeholder.cpp"
    }
    
    # Run CMake to generate build files
    Push-Location $BuildDir
    cmake -G Ninja ..
    Pop-Location
    
    WriteColor "CMake build files generated successfully!" "Green"
} else {
    # Create a minimal build.ninja file
    WriteColor "Creating minimal build.ninja file..." "Yellow"
    
    # Create the build.ninja content with proper new lines and UTF-8 encoding
    $buildContent = @"
# Simple build.ninja file for Watsonx Code Assistant
# This file is automatically generated

rule cxx
  command = g++ -MMD -MT `$out -MF `$out.d -o `$out -c `$in
  description = CXX `$out
  depfile = `$out.d
  deps = gcc

rule link
  command = g++ -o `$out `$in
  description = LINK `$out

build $BuildDir/placeholder.o: cxx placeholder.cpp
build $BuildDir/placeholder: link $BuildDir/placeholder.o

default $BuildDir/placeholder
"@

    # Create placeholder source if needed
    if (-not (Test-Path "placeholder.cpp")) {
        @"
// Placeholder source file for build system
#include <iostream>

int main() {
    std::cout << "Watsonx Code Assistant Ninja Build Team\n";
    return 0;
}
"@ | Set-Content "placeholder.cpp" -Encoding UTF8
    }

    # Save the build.ninja file with proper UTF-8 encoding
    Set-Content -Path "$BuildDir/build.ninja" -Value $buildContent -Encoding UTF8
    
    # Make sure the file is accessible for both Windows and WSL
    if (Get-Command "icacls" -ErrorAction SilentlyContinue) {
        icacls "$BuildDir/build.ninja" /grant Everyone:F
    }
    
    WriteColor "Build environment initialized with minimal configuration" "Green"
    WriteColor "Build ninja file created at $BuildDir/build.ninja" "Green"
}

WriteColor "Build initialization complete!" "Green"
