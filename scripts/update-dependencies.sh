#!/bin/bash
# Automated dependency updater for Watsonx Code Assistant
# This script checks for outdated dependencies and creates a PR with updates

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== Watsonx Code Assistant Dependency Updater ===${NC}"
echo -e "${BLUE}================================================${NC}"

# Check if running in CI
IN_CI="${CI:-false}"

# Check required tools
check_command() {
    if ! command -v "$1" &> /dev/null; then
        echo -e "${RED}❌ Required command not found: $1${NC}"
        echo "Please install it before running this script."
        exit 1
    fi
}

check_command pip
check_command npm
check_command git
[[ "$IN_CI" == "false" ]] && check_command gh

# Create new branch for updates
BRANCH_NAME="automated-deps-update-$(date +%Y%m%d-%H%M%S)"
if [[ "$IN_CI" == "false" ]]; then
    git checkout -b "$BRANCH_NAME"
else
    git config --global user.email "bot@watsonx.ai"
    git config --global user.name "Watsonx Dependency Bot"
    git checkout -b "$BRANCH_NAME"
fi

# Track if we made any updates
UPDATED=false

# Update Python dependencies
echo -e "\n${YELLOW}Checking Python dependencies...${NC}"

# Create a requirements-updated.txt file
python -m pip install pip-tools
pip-compile --upgrade --output-file=requirements-updated.txt requirements.in

# Check if there are differences
if ! diff -q requirements.txt requirements-updated.txt &>/dev/null; then
    echo -e "${GREEN}✅ Found Python dependency updates${NC}"
    mv requirements-updated.txt requirements.txt
    git add requirements.txt
    UPDATED=true
    
    # Generate update summary
    echo -e "\n${BLUE}Python dependency updates:${NC}"
    diff -u <(grep -v '^#' requirements.txt.bak) <(grep -v '^#' requirements.txt) || true
else
    echo -e "${GREEN}✓ Python dependencies are up to date${NC}"
    rm requirements-updated.txt
fi

# Update NPM dependencies
if [[ -f "package.json" ]]; then
    echo -e "\n${YELLOW}Checking NPM dependencies...${NC}"
    npm outdated --json > outdated.json
    
    # Check if there are outdated dependencies
    if [[ "$(cat outdated.json)" != "{}" ]]; then
        echo -e "${GREEN}✅ Found NPM dependency updates${NC}"
        npm update --save
        git add package.json package-lock.json
        UPDATED=true
        
        # Generate update summary
        echo -e "\n${BLUE}NPM dependency updates:${NC}"
        jq -r 'to_entries[] | "\(.key): \(.value.current) -> \(.value.latest)"' outdated.json
    else
        echo -e "${GREEN}✓ NPM dependencies are up to date${NC}"
    fi
    rm outdated.json
fi

# Check for Docker base image updates
if [[ -f "Dockerfile" ]]; then
    echo -e "\n${YELLOW}Checking Docker base image...${NC}"
    
    # Extract base image from Dockerfile
    BASE_IMAGE=$(grep -m 1 "^FROM" Dockerfile | awk '{print $2}')
    
    if [[ -n "$BASE_IMAGE" ]]; then
        echo "Current base image: $BASE_IMAGE"
        
        # Check if there's a newer version available
        if [[ "$BASE_IMAGE" == *":"* ]]; then
            IMAGE_NAME=${BASE_IMAGE%%:*}
            CURRENT_TAG=${BASE_IMAGE#*:}
            
            # Pull the latest image info
            docker pull "$IMAGE_NAME:latest" > /dev/null || true
            
            # Check if current tag is not latest
            if [[ "$CURRENT_TAG" != "latest" ]]; then
                echo -e "${GREEN}✅ Updating Docker base image to latest${NC}"
                sed -i "s|FROM $BASE_IMAGE|FROM $IMAGE_NAME:latest|" Dockerfile
                git add Dockerfile
                UPDATED=true
            else
                echo -e "${GREEN}✓ Docker base image is already using latest tag${NC}"
            fi
        fi
    fi
fi

# If we made updates, commit and create a PR
if [[ "$UPDATED" == "true" ]]; then
    git commit -m "📦 Automated dependency update $(date +%Y-%m-%d)"
    
    if [[ "$IN_CI" == "false" ]]; then
        echo -e "\n${YELLOW}Pushing changes and creating PR...${NC}"
        git push origin "$BRANCH_NAME"
        gh pr create --title "📦 Automated dependency update $(date +%Y-%m-%d)" \
                   --body "This PR updates dependencies to their latest versions.\n\nAutomatically generated by the dependency update script." \
                   --label "dependencies" \
                   --label "automated"
        echo -e "${GREEN}✅ PR created successfully!${NC}"
    else
        echo -e "\n${YELLOW}Pushing changes...${NC}"
        git push origin "$BRANCH_NAME"
        echo -e "${GREEN}✅ Branch pushed successfully! Create a PR in your CI system.${NC}"
    fi
else
    echo -e "\n${GREEN}✅ All dependencies are up to date${NC}"
fi

# Return to previous branch if not in CI
if [[ "$IN_CI" == "false" ]]; then
    git checkout -
fi

echo -e "\n${BLUE}=== Dependency check completed ===${NC}"
