#
# Deploy-Ninjas.ps1
# PowerShell script for deploying ninja build team on Windows
# 
# Usage:
#   .\Deploy-Ninjas.ps1             - Deploy basic ninja team
#   .\Deploy-Ninjas.ps1 -Full       - Deploy full recursive ninja team
#   .\Deploy-Ninjas.ps1 -Clean      - Clean ninja cache before deploying
#   .\Deploy-Ninjas.ps1 -Help       - Show help information

param (
    [switch]$Full,
    [switch]$Clean,
    [switch]$Help,
    [int]$Depth = 3,
    [string]$Mode = "recursive",
    [string]$Config = "scripts\ninja-team-config.json",
    [string]$HostsFile = "ninja-hosts.txt",
    [switch]$Initialize
)

# Output formatting
function WriteColor([string]$text, [string]$color = "White") {
    Write-Host $text -ForegroundColor $color
}

# Banner
WriteColor "`n========================================================" "Cyan"
WriteColor "           NINJA BUILD TEAM DEPLOYMENT SYSTEM           " "Cyan" 
WriteColor "                      [PowerShell]                      " "Cyan"
WriteColor "========================================================`n" "Cyan"

# Show help if requested
if ($Help) {
    WriteColor "Usage: .\Deploy-Ninjas.ps1 [options]" "Yellow"
    WriteColor "`nOptions:"
    WriteColor "  -Full        Deploy full recursive ninja team with all features"
    WriteColor "  -Clean       Clean ninja cache before deploying"
    WriteColor "  -Depth N     Set recursive deployment depth (default: 3)"
    WriteColor "  -Mode X      Set deployment mode (default: recursive)"
    WriteColor "  -Config X    Specify config file path"
    WriteColor "  -HostsFile X Specify hosts file path"
    WriteColor "  -Initialize  Initialize build environment if it doesn't exist"
    WriteColor "  -Help        Show this help message"
    exit 0
}

# Check prerequisites
WriteColor "Checking prerequisites..." "Yellow"

# Check for Python
if (-not (Get-Command python -ErrorAction SilentlyContinue)) {
    WriteColor "[ERROR] Python not found. Please install Python 3.x and try again." "Red"
    exit 1
}

# Check for Ninja
if (-not (Get-Command ninja -ErrorAction SilentlyContinue)) {
    WriteColor "[WARNING] Ninja not found in PATH. Will try to install via pip..." "Yellow"
    python -m pip install ninja
    
    # Add to current PATH if installed in user directory
    $NinjaPaths = @(
        "$env:APPDATA\Python\Python*\Scripts",
        "$env:LOCALAPPDATA\Programs\Python\Python*\Scripts"
    )
    
    foreach ($Path in $NinjaPaths) {
        $ResolvedPaths = Resolve-Path $Path -ErrorAction SilentlyContinue
        if ($ResolvedPaths) {
            foreach ($ResolvedPath in $ResolvedPaths) {
                $env:PATH += ";$ResolvedPath"
            }
        }
    }
}

# Create logs directory
if (-not (Test-Path "logs\ninja-team")) {
    New-Item -Path "logs\ninja-team" -ItemType Directory -Force | Out-Null
}

# Initialize the build environment if needed
$buildNinjaPath = "build\build.ninja"
if (($Initialize -or -not (Test-Path $buildNinjaPath)) -and -not $Clean) {
    WriteColor "[INFO] Initializing build environment..." "Yellow"
    
    # Ensure build directory exists
    if (-not (Test-Path "build")) {
        New-Item -Path "build" -ItemType Directory -Force | Out-Null
    }
    
    # Create a minimal build.ninja file if needed
    if (-not (Test-Path $buildNinjaPath)) {
        WriteColor "[INFO] Creating minimal build.ninja file..." "Yellow"
        
        $buildNinjaContent = @"
# Minimal build.ninja file for Watsonx Code Assistant
# Generated by Deploy-Ninjas.ps1

rule cxx
  command = g++ -MMD -MT `$out -MF `$out.d -o `$out -c `$in
  description = CXX `$out
  depfile = `$out.d
  deps = gcc

rule link
  command = g++ -o `$out `$in
  description = LINK `$out

build build/placeholder.o: cxx placeholder.cpp
build build/placeholder: link build/placeholder.o

default build/placeholder
"@
        # Create a placeholder cpp file if needed
        if (-not (Test-Path "placeholder.cpp")) {
            @"
// Placeholder source file for build system
#include <iostream>

int main() {
    std::cout << "Watsonx Code Assistant Ninja Build Team\n";
    return 0;
}
"@ | Set-Content "placeholder.cpp" -Encoding UTF8
        }

        # Save the build.ninja file
        $buildNinjaContent | Set-Content $buildNinjaPath -Encoding UTF8
        WriteColor "[INFO] Build environment initialized with minimal configuration" "Green"
    }
}

# Create default hosts file if it doesn't exist
if (-not (Test-Path $HostsFile)) {
    WriteColor "[INFO] Creating default $HostsFile file..." "Yellow"
    @"
# Ninja Build Team - Host Configuration
# Format: hostname port [capabilities]

# Local host (always available)
localhost 8374

# Add remote build hosts below
# hostname1 8374
# hostname2 8374

# For machines with special capabilities, add them after the port
# gpu-server1 8374 gpu,cuda=11.4
# build-server5 8374 high-mem,fast-storage
"@ | Set-Content $HostsFile
}

# Clean ninja cache if requested
if ($Clean) {
    WriteColor "[INFO] Cleaning ninja cache..." "Yellow"
    if (Test-Path ".ninja_cache") {
        Remove-Item -Recurse -Force ".ninja_cache"
    }
    
    # Also clean build directory if requested
    WriteColor "[INFO] Cleaning build directory..." "Yellow"
    if (Test-Path "build") {
        Remove-Item -Recurse -Force "build"
    }
    
    WriteColor "[INFO] Clean completed" "Green"
    
    # If only cleaning, exit here
    if (-not $Full -and -not $Mode) {
        exit 0
    }
    
    # Otherwise, initialize the build environment after cleaning
    WriteColor "[INFO] Re-initializing build environment after clean..." "Yellow"
    if (-not (Test-Path "build")) {
        New-Item -Path "build" -ItemType Directory -Force | Out-Null
    }
    
    $buildNinjaContent = @"
# Minimal build.ninja file for Watsonx Code Assistant
# Generated by Deploy-Ninjas.ps1 after clean

rule cxx
  command = g++ -MMD -MT `$out -MF `$out.d -o `$out -c `$in
  description = CXX `$out
  depfile = `$out.d
  deps = gcc

rule link
  command = g++ -o `$out `$in
  description = LINK `$out

build build/placeholder.o: cxx placeholder.cpp
build build/placeholder: link build/placeholder.o

default build/placeholder
"@
    
    # Create a placeholder cpp file if needed
    if (-not (Test-Path "placeholder.cpp")) {
        @"
// Placeholder source file for build system
#include <iostream>

int main() {
    std::cout << "Watsonx Code Assistant Ninja Build Team\n";
    return 0;
}
"@ | Set-Content "placeholder.cpp" -Encoding UTF8
    }

    # Save the build.ninja file
    $buildNinjaContent | Set-Content $buildNinjaPath -Encoding UTF8
    WriteColor "[INFO] Build environment re-initialized" "Green"
}

# Now try deploying
if ($Full) {
    WriteColor "[INFO] Deploying full recursive ninja team..." "Yellow"
    
    # Check if WSL is available for bash script execution
    $wslEnabled = $false
    try {
        # Try to execute a simple command in WSL
        $wslOutput = wsl ls 2>&1
        $wslEnabled = $LASTEXITCODE -eq 0
    }
    catch {
        $wslEnabled = $false
    }
    
    if ($wslEnabled) {
        WriteColor "[INFO] Using WSL to run full deployment script..." "Yellow"
        # Convert Windows path to WSL path
        $currentDir = (Get-Location).Path.Replace("\", "/").Replace("C:", "/mnt/c")
        
        # Execute the bash script through WSL
        wsl cd $currentDir "&&" chmod +x ./scripts/deploy-ninja-team.sh "&&" ./scripts/deploy-ninja-team.sh --config=$Config --hosts=$HostsFile --depth=$Depth --mode=$Mode
        
        if ($LASTEXITCODE -eq 0) {
            WriteColor "`n===============================================" "Green"
            WriteColor "        NINJA DEPLOYMENT SUCCESSFUL!          " "Green"
            WriteColor "===============================================`n" "Green"
        }
        else {
            WriteColor "[ERROR] Full ninja team deployment failed with code $LASTEXITCODE" "Red"
        }
    }
    else {
        WriteColor "[WARNING] WSL not available. Using native Windows deployment instead." "Yellow"
        WriteColor "[INFO] To enable WSL, run 'wsl --install' in an administrator PowerShell" "Yellow"
        
        # Fall back to basic deployment
        $pythonArgs = @(
            "scripts\ninja-team.py",
            "--mode", $Mode,
            "--hosts", $HostsFile,
            "--recursive-depth", $Depth,
            "--config", $Config,
            "--build-dir", "build",
            "--verbose"
        )
        
        # Execute the Python script
        & python $pythonArgs
        
        if ($LASTEXITCODE -eq 0) {
            WriteColor "`n===============================================" "Green"
            WriteColor "        NINJA DEPLOYMENT SUCCESSFUL!          " "Green"
            WriteColor "===============================================`n" "Green"
        }
        else {
            WriteColor "[ERROR] Ninja deployment failed with code $LASTEXITCODE" "Red"
            exit $LASTEXITCODE
        }
    }
}
else {
    # Basic deployment
    WriteColor "[INFO] Deploying ninja build team..." "Yellow"
    
    # Deploy using Python script directly
    $pythonArgs = @(
        "scripts\ninja-team.py",
        "--mode", $Mode,
        "--hosts", $HostsFile,
        "--recursive-depth", $Depth,
        "--config", $Config,
        "--build-dir", "build",
        "--verbose"
    )
    
    # Execute the Python script
    & python $pythonArgs
    
    if ($LASTEXITCODE -eq 0) {
        WriteColor "`n===============================================" "Green"
        WriteColor "        NINJA DEPLOYMENT SUCCESSFUL!          " "Green"
        WriteColor "===============================================`n" "Green"
    }
    else {
        WriteColor "[ERROR] Ninja deployment failed with code $LASTEXITCODE" "Red"
        exit $LASTEXITCODE
    }
}

exit 0
